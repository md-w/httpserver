// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_status_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_status_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_status_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_status_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_status_2eproto;
namespace resource {
class ClusterStatus;
struct ClusterStatusDefaultTypeInternal;
extern ClusterStatusDefaultTypeInternal _ClusterStatus_default_instance_;
class MachineStatus;
struct MachineStatusDefaultTypeInternal;
extern MachineStatusDefaultTypeInternal _MachineStatus_default_instance_;
class ProcessStatus;
struct ProcessStatusDefaultTypeInternal;
extern ProcessStatusDefaultTypeInternal _ProcessStatus_default_instance_;
class ThreadStatus;
struct ThreadStatusDefaultTypeInternal;
extern ThreadStatusDefaultTypeInternal _ThreadStatus_default_instance_;
}  // namespace resource
PROTOBUF_NAMESPACE_OPEN
template<> ::resource::ClusterStatus* Arena::CreateMaybeMessage<::resource::ClusterStatus>(Arena*);
template<> ::resource::MachineStatus* Arena::CreateMaybeMessage<::resource::MachineStatus>(Arena*);
template<> ::resource::ProcessStatus* Arena::CreateMaybeMessage<::resource::ProcessStatus>(Arena*);
template<> ::resource::ThreadStatus* Arena::CreateMaybeMessage<::resource::ThreadStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resource {

// ===================================================================

class ThreadStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ThreadStatus) */ {
 public:
  inline ThreadStatus() : ThreadStatus(nullptr) {}
  ~ThreadStatus() override;
  explicit constexpr ThreadStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThreadStatus(const ThreadStatus& from);
  ThreadStatus(ThreadStatus&& from) noexcept
    : ThreadStatus() {
    *this = ::std::move(from);
  }

  inline ThreadStatus& operator=(const ThreadStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadStatus& operator=(ThreadStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThreadStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThreadStatus* internal_default_instance() {
    return reinterpret_cast<const ThreadStatus*>(
               &_ThreadStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThreadStatus& a, ThreadStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThreadStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThreadStatus* New() const final {
    return new ThreadStatus();
  }

  ThreadStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThreadStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThreadStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThreadStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ThreadStatus";
  }
  protected:
  explicit ThreadStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kValueFieldNumber = 3,
    kLastValueFieldNumber = 4,
    kLastUpdatedInMsFieldNumber = 5,
  };
  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 channel_id = 2;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 last_value = 4;
  bool has_last_value() const;
  private:
  bool _internal_has_last_value() const;
  public:
  void clear_last_value();
  ::PROTOBUF_NAMESPACE_ID::int64 last_value() const;
  void set_last_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_value() const;
  void _internal_set_last_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 last_updated_in_ms = 5;
  bool has_last_updated_in_ms() const;
  private:
  bool _internal_has_last_updated_in_ms() const;
  public:
  void clear_last_updated_in_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_in_ms() const;
  void set_last_updated_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_updated_in_ms() const;
  void _internal_set_last_updated_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.ThreadStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_in_ms_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class ProcessStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ProcessStatus) */ {
 public:
  inline ProcessStatus() : ProcessStatus(nullptr) {}
  ~ProcessStatus() override;
  explicit constexpr ProcessStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStatus(const ProcessStatus& from);
  ProcessStatus(ProcessStatus&& from) noexcept
    : ProcessStatus() {
    *this = ::std::move(from);
  }

  inline ProcessStatus& operator=(const ProcessStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStatus& operator=(ProcessStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStatus* internal_default_instance() {
    return reinterpret_cast<const ProcessStatus*>(
               &_ProcessStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessStatus& a, ProcessStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessStatus* New() const final {
    return new ProcessStatus();
  }

  ProcessStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ProcessStatus";
  }
  protected:
  explicit ProcessStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadStatusFieldNumber = 3,
    kIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated .resource.ThreadStatus thread_status = 3;
  int thread_status_size() const;
  private:
  int _internal_thread_status_size() const;
  public:
  void clear_thread_status();
  ::resource::ThreadStatus* mutable_thread_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ThreadStatus >*
      mutable_thread_status();
  private:
  const ::resource::ThreadStatus& _internal_thread_status(int index) const;
  ::resource::ThreadStatus* _internal_add_thread_status();
  public:
  const ::resource::ThreadStatus& thread_status(int index) const;
  ::resource::ThreadStatus* add_thread_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ThreadStatus >&
      thread_status() const;

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 channel_id = 2;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.ProcessStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ThreadStatus > thread_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class MachineStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.MachineStatus) */ {
 public:
  inline MachineStatus() : MachineStatus(nullptr) {}
  ~MachineStatus() override;
  explicit constexpr MachineStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MachineStatus(const MachineStatus& from);
  MachineStatus(MachineStatus&& from) noexcept
    : MachineStatus() {
    *this = ::std::move(from);
  }

  inline MachineStatus& operator=(const MachineStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineStatus& operator=(MachineStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MachineStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MachineStatus* internal_default_instance() {
    return reinterpret_cast<const MachineStatus*>(
               &_MachineStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MachineStatus& a, MachineStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MachineStatus* New() const final {
    return new MachineStatus();
  }

  MachineStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MachineStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MachineStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MachineStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.MachineStatus";
  }
  protected:
  explicit MachineStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessStatusFieldNumber = 3,
    kIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated .resource.ProcessStatus process_status = 3;
  int process_status_size() const;
  private:
  int _internal_process_status_size() const;
  public:
  void clear_process_status();
  ::resource::ProcessStatus* mutable_process_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ProcessStatus >*
      mutable_process_status();
  private:
  const ::resource::ProcessStatus& _internal_process_status(int index) const;
  ::resource::ProcessStatus* _internal_add_process_status();
  public:
  const ::resource::ProcessStatus& process_status(int index) const;
  ::resource::ProcessStatus* add_process_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ProcessStatus >&
      process_status() const;

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 channel_id = 2;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.MachineStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ProcessStatus > process_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  friend struct ::TableStruct_status_2eproto;
};
// -------------------------------------------------------------------

class ClusterStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resource.ClusterStatus) */ {
 public:
  inline ClusterStatus() : ClusterStatus(nullptr) {}
  ~ClusterStatus() override;
  explicit constexpr ClusterStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterStatus(const ClusterStatus& from);
  ClusterStatus(ClusterStatus&& from) noexcept
    : ClusterStatus() {
    *this = ::std::move(from);
  }

  inline ClusterStatus& operator=(const ClusterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterStatus& operator=(ClusterStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterStatus* internal_default_instance() {
    return reinterpret_cast<const ClusterStatus*>(
               &_ClusterStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClusterStatus& a, ClusterStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterStatus* New() const final {
    return new ClusterStatus();
  }

  ClusterStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClusterStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClusterStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resource.ClusterStatus";
  }
  protected:
  explicit ClusterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineStatusFieldNumber = 3,
    kIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated .resource.MachineStatus machine_status = 3;
  int machine_status_size() const;
  private:
  int _internal_machine_status_size() const;
  public:
  void clear_machine_status();
  ::resource::MachineStatus* mutable_machine_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::MachineStatus >*
      mutable_machine_status();
  private:
  const ::resource::MachineStatus& _internal_machine_status(int index) const;
  ::resource::MachineStatus* _internal_add_machine_status();
  public:
  const ::resource::MachineStatus& machine_status(int index) const;
  ::resource::MachineStatus* add_machine_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::MachineStatus >&
      machine_status() const;

  // required int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 channel_id = 2;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resource.ClusterStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::MachineStatus > machine_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_id_;
  friend struct ::TableStruct_status_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThreadStatus

// required int64 id = 1;
inline bool ThreadStatus::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThreadStatus::has_id() const {
  return _internal_has_id();
}
inline void ThreadStatus::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::id() const {
  // @@protoc_insertion_point(field_get:resource.ThreadStatus.id)
  return _internal_id();
}
inline void ThreadStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ThreadStatus::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.ThreadStatus.id)
}

// required int64 channel_id = 2;
inline bool ThreadStatus::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThreadStatus::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void ThreadStatus::clear_channel_id() {
  channel_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::channel_id() const {
  // @@protoc_insertion_point(field_get:resource.ThreadStatus.channel_id)
  return _internal_channel_id();
}
inline void ThreadStatus::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_ = value;
}
inline void ThreadStatus::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:resource.ThreadStatus.channel_id)
}

// required int64 value = 3;
inline bool ThreadStatus::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThreadStatus::has_value() const {
  return _internal_has_value();
}
inline void ThreadStatus::clear_value() {
  value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::value() const {
  // @@protoc_insertion_point(field_get:resource.ThreadStatus.value)
  return _internal_value();
}
inline void ThreadStatus::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void ThreadStatus::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:resource.ThreadStatus.value)
}

// required int64 last_value = 4;
inline bool ThreadStatus::_internal_has_last_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThreadStatus::has_last_value() const {
  return _internal_has_last_value();
}
inline void ThreadStatus::clear_last_value() {
  last_value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::_internal_last_value() const {
  return last_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::last_value() const {
  // @@protoc_insertion_point(field_get:resource.ThreadStatus.last_value)
  return _internal_last_value();
}
inline void ThreadStatus::_internal_set_last_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_value_ = value;
}
inline void ThreadStatus::set_last_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_value(value);
  // @@protoc_insertion_point(field_set:resource.ThreadStatus.last_value)
}

// required int64 last_updated_in_ms = 5;
inline bool ThreadStatus::_internal_has_last_updated_in_ms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThreadStatus::has_last_updated_in_ms() const {
  return _internal_has_last_updated_in_ms();
}
inline void ThreadStatus::clear_last_updated_in_ms() {
  last_updated_in_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::_internal_last_updated_in_ms() const {
  return last_updated_in_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ThreadStatus::last_updated_in_ms() const {
  // @@protoc_insertion_point(field_get:resource.ThreadStatus.last_updated_in_ms)
  return _internal_last_updated_in_ms();
}
inline void ThreadStatus::_internal_set_last_updated_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_updated_in_ms_ = value;
}
inline void ThreadStatus::set_last_updated_in_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_updated_in_ms(value);
  // @@protoc_insertion_point(field_set:resource.ThreadStatus.last_updated_in_ms)
}

// -------------------------------------------------------------------

// ProcessStatus

// required int64 id = 1;
inline bool ProcessStatus::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStatus::has_id() const {
  return _internal_has_id();
}
inline void ProcessStatus::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessStatus::id() const {
  // @@protoc_insertion_point(field_get:resource.ProcessStatus.id)
  return _internal_id();
}
inline void ProcessStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ProcessStatus::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.ProcessStatus.id)
}

// required int64 channel_id = 2;
inline bool ProcessStatus::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProcessStatus::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void ProcessStatus::clear_channel_id() {
  channel_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessStatus::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessStatus::channel_id() const {
  // @@protoc_insertion_point(field_get:resource.ProcessStatus.channel_id)
  return _internal_channel_id();
}
inline void ProcessStatus::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_ = value;
}
inline void ProcessStatus::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:resource.ProcessStatus.channel_id)
}

// repeated .resource.ThreadStatus thread_status = 3;
inline int ProcessStatus::_internal_thread_status_size() const {
  return thread_status_.size();
}
inline int ProcessStatus::thread_status_size() const {
  return _internal_thread_status_size();
}
inline void ProcessStatus::clear_thread_status() {
  thread_status_.Clear();
}
inline ::resource::ThreadStatus* ProcessStatus::mutable_thread_status(int index) {
  // @@protoc_insertion_point(field_mutable:resource.ProcessStatus.thread_status)
  return thread_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ThreadStatus >*
ProcessStatus::mutable_thread_status() {
  // @@protoc_insertion_point(field_mutable_list:resource.ProcessStatus.thread_status)
  return &thread_status_;
}
inline const ::resource::ThreadStatus& ProcessStatus::_internal_thread_status(int index) const {
  return thread_status_.Get(index);
}
inline const ::resource::ThreadStatus& ProcessStatus::thread_status(int index) const {
  // @@protoc_insertion_point(field_get:resource.ProcessStatus.thread_status)
  return _internal_thread_status(index);
}
inline ::resource::ThreadStatus* ProcessStatus::_internal_add_thread_status() {
  return thread_status_.Add();
}
inline ::resource::ThreadStatus* ProcessStatus::add_thread_status() {
  ::resource::ThreadStatus* _add = _internal_add_thread_status();
  // @@protoc_insertion_point(field_add:resource.ProcessStatus.thread_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ThreadStatus >&
ProcessStatus::thread_status() const {
  // @@protoc_insertion_point(field_list:resource.ProcessStatus.thread_status)
  return thread_status_;
}

// -------------------------------------------------------------------

// MachineStatus

// required int64 id = 1;
inline bool MachineStatus::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MachineStatus::has_id() const {
  return _internal_has_id();
}
inline void MachineStatus::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MachineStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MachineStatus::id() const {
  // @@protoc_insertion_point(field_get:resource.MachineStatus.id)
  return _internal_id();
}
inline void MachineStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void MachineStatus::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.MachineStatus.id)
}

// required int64 channel_id = 2;
inline bool MachineStatus::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MachineStatus::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void MachineStatus::clear_channel_id() {
  channel_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MachineStatus::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MachineStatus::channel_id() const {
  // @@protoc_insertion_point(field_get:resource.MachineStatus.channel_id)
  return _internal_channel_id();
}
inline void MachineStatus::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_ = value;
}
inline void MachineStatus::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:resource.MachineStatus.channel_id)
}

// repeated .resource.ProcessStatus process_status = 3;
inline int MachineStatus::_internal_process_status_size() const {
  return process_status_.size();
}
inline int MachineStatus::process_status_size() const {
  return _internal_process_status_size();
}
inline void MachineStatus::clear_process_status() {
  process_status_.Clear();
}
inline ::resource::ProcessStatus* MachineStatus::mutable_process_status(int index) {
  // @@protoc_insertion_point(field_mutable:resource.MachineStatus.process_status)
  return process_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ProcessStatus >*
MachineStatus::mutable_process_status() {
  // @@protoc_insertion_point(field_mutable_list:resource.MachineStatus.process_status)
  return &process_status_;
}
inline const ::resource::ProcessStatus& MachineStatus::_internal_process_status(int index) const {
  return process_status_.Get(index);
}
inline const ::resource::ProcessStatus& MachineStatus::process_status(int index) const {
  // @@protoc_insertion_point(field_get:resource.MachineStatus.process_status)
  return _internal_process_status(index);
}
inline ::resource::ProcessStatus* MachineStatus::_internal_add_process_status() {
  return process_status_.Add();
}
inline ::resource::ProcessStatus* MachineStatus::add_process_status() {
  ::resource::ProcessStatus* _add = _internal_add_process_status();
  // @@protoc_insertion_point(field_add:resource.MachineStatus.process_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::ProcessStatus >&
MachineStatus::process_status() const {
  // @@protoc_insertion_point(field_list:resource.MachineStatus.process_status)
  return process_status_;
}

// -------------------------------------------------------------------

// ClusterStatus

// required int64 id = 1;
inline bool ClusterStatus::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClusterStatus::has_id() const {
  return _internal_has_id();
}
inline void ClusterStatus::clear_id() {
  id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterStatus::id() const {
  // @@protoc_insertion_point(field_get:resource.ClusterStatus.id)
  return _internal_id();
}
inline void ClusterStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ClusterStatus::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resource.ClusterStatus.id)
}

// required int64 channel_id = 2;
inline bool ClusterStatus::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClusterStatus::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void ClusterStatus::clear_channel_id() {
  channel_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterStatus::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterStatus::channel_id() const {
  // @@protoc_insertion_point(field_get:resource.ClusterStatus.channel_id)
  return _internal_channel_id();
}
inline void ClusterStatus::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_ = value;
}
inline void ClusterStatus::set_channel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:resource.ClusterStatus.channel_id)
}

// repeated .resource.MachineStatus machine_status = 3;
inline int ClusterStatus::_internal_machine_status_size() const {
  return machine_status_.size();
}
inline int ClusterStatus::machine_status_size() const {
  return _internal_machine_status_size();
}
inline void ClusterStatus::clear_machine_status() {
  machine_status_.Clear();
}
inline ::resource::MachineStatus* ClusterStatus::mutable_machine_status(int index) {
  // @@protoc_insertion_point(field_mutable:resource.ClusterStatus.machine_status)
  return machine_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::MachineStatus >*
ClusterStatus::mutable_machine_status() {
  // @@protoc_insertion_point(field_mutable_list:resource.ClusterStatus.machine_status)
  return &machine_status_;
}
inline const ::resource::MachineStatus& ClusterStatus::_internal_machine_status(int index) const {
  return machine_status_.Get(index);
}
inline const ::resource::MachineStatus& ClusterStatus::machine_status(int index) const {
  // @@protoc_insertion_point(field_get:resource.ClusterStatus.machine_status)
  return _internal_machine_status(index);
}
inline ::resource::MachineStatus* ClusterStatus::_internal_add_machine_status() {
  return machine_status_.Add();
}
inline ::resource::MachineStatus* ClusterStatus::add_machine_status() {
  ::resource::MachineStatus* _add = _internal_add_machine_status();
  // @@protoc_insertion_point(field_add:resource.ClusterStatus.machine_status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resource::MachineStatus >&
ClusterStatus::machine_status() const {
  // @@protoc_insertion_point(field_list:resource.ClusterStatus.machine_status)
  return machine_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resource

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_status_2eproto
